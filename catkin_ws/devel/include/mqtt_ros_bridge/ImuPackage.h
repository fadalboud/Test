// Generated by gencpp from file mqtt_ros_bridge/ImuPackage.msg
// DO NOT EDIT!


#ifndef MQTT_ROS_BRIDGE_MESSAGE_IMUPACKAGE_H
#define MQTT_ROS_BRIDGE_MESSAGE_IMUPACKAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/UInt64.h>
#include <mqtt_ros_bridge/Vector3Time.h>
#include <mqtt_ros_bridge/Vector3Time.h>

namespace mqtt_ros_bridge
{
template <class ContainerAllocator>
struct ImuPackage_
{
  typedef ImuPackage_<ContainerAllocator> Type;

  ImuPackage_()
    : time()
    , linear_acceleration()
    , angular_velocity()  {
    }
  ImuPackage_(const ContainerAllocator& _alloc)
    : time(_alloc)
    , linear_acceleration(_alloc)
    , angular_velocity(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::UInt64_<ContainerAllocator>  _time_type;
  _time_type time;

   typedef std::vector< ::mqtt_ros_bridge::Vector3Time_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mqtt_ros_bridge::Vector3Time_<ContainerAllocator> >::other >  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef std::vector< ::mqtt_ros_bridge::Vector3Time_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mqtt_ros_bridge::Vector3Time_<ContainerAllocator> >::other >  _angular_velocity_type;
  _angular_velocity_type angular_velocity;





  typedef boost::shared_ptr< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> const> ConstPtr;

}; // struct ImuPackage_

typedef ::mqtt_ros_bridge::ImuPackage_<std::allocator<void> > ImuPackage;

typedef boost::shared_ptr< ::mqtt_ros_bridge::ImuPackage > ImuPackagePtr;
typedef boost::shared_ptr< ::mqtt_ros_bridge::ImuPackage const> ImuPackageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator1> & lhs, const ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.angular_velocity == rhs.angular_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator1> & lhs, const ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_ros_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87d2de22057b308bbb4c314993ad9d86";
  }

  static const char* value(const ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87d2de22057b308bULL;
  static const uint64_t static_value2 = 0xbb4c314993ad9d86ULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_ros_bridge/ImuPackage";
  }

  static const char* value(const ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/UInt64 time\n"
"mqtt_ros_bridge/Vector3Time[] linear_acceleration\n"
"mqtt_ros_bridge/Vector3Time[] angular_velocity\n"
"================================================================================\n"
"MSG: std_msgs/UInt64\n"
"uint64 data\n"
"================================================================================\n"
"MSG: mqtt_ros_bridge/Vector3Time\n"
"geometry_msgs/Vector3 vector\n"
"std_msgs/UInt64 time\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.linear_acceleration);
      stream.next(m.angular_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImuPackage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_ros_bridge::ImuPackage_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    s << std::endl;
    Printer< ::std_msgs::UInt64_<ContainerAllocator> >::stream(s, indent + "  ", v.time);
    s << indent << "linear_acceleration[]" << std::endl;
    for (size_t i = 0; i < v.linear_acceleration.size(); ++i)
    {
      s << indent << "  linear_acceleration[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mqtt_ros_bridge::Vector3Time_<ContainerAllocator> >::stream(s, indent + "    ", v.linear_acceleration[i]);
    }
    s << indent << "angular_velocity[]" << std::endl;
    for (size_t i = 0; i < v.angular_velocity.size(); ++i)
    {
      s << indent << "  angular_velocity[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mqtt_ros_bridge::Vector3Time_<ContainerAllocator> >::stream(s, indent + "    ", v.angular_velocity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_ROS_BRIDGE_MESSAGE_IMUPACKAGE_H
