# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mqtt_ros_bridge/ImuPackage.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mqtt_ros_bridge.msg
import std_msgs.msg

class ImuPackage(genpy.Message):
  _md5sum = "87d2de22057b308bbb4c314993ad9d86"
  _type = "mqtt_ros_bridge/ImuPackage"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/UInt64 time
mqtt_ros_bridge/Vector3Time[] linear_acceleration
mqtt_ros_bridge/Vector3Time[] angular_velocity
================================================================================
MSG: std_msgs/UInt64
uint64 data
================================================================================
MSG: mqtt_ros_bridge/Vector3Time
geometry_msgs/Vector3 vector
std_msgs/UInt64 time


================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['time','linear_acceleration','angular_velocity']
  _slot_types = ['std_msgs/UInt64','mqtt_ros_bridge/Vector3Time[]','mqtt_ros_bridge/Vector3Time[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,linear_acceleration,angular_velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImuPackage, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = std_msgs.msg.UInt64()
      if self.linear_acceleration is None:
        self.linear_acceleration = []
      if self.angular_velocity is None:
        self.angular_velocity = []
    else:
      self.time = std_msgs.msg.UInt64()
      self.linear_acceleration = []
      self.angular_velocity = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.time.data
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.linear_acceleration)
      buff.write(_struct_I.pack(length))
      for val1 in self.linear_acceleration:
        _v1 = val1.vector
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.time
        _x = _v2.data
        buff.write(_get_struct_Q().pack(_x))
      length = len(self.angular_velocity)
      buff.write(_struct_I.pack(length))
      for val1 in self.angular_velocity:
        _v3 = val1.vector
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.time
        _x = _v4.data
        buff.write(_get_struct_Q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.time is None:
        self.time = std_msgs.msg.UInt64()
      if self.linear_acceleration is None:
        self.linear_acceleration = None
      if self.angular_velocity is None:
        self.angular_velocity = None
      end = 0
      start = end
      end += 8
      (self.time.data,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.linear_acceleration = []
      for i in range(0, length):
        val1 = mqtt_ros_bridge.msg.Vector3Time()
        _v5 = val1.vector
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = val1.time
        start = end
        end += 8
        (_v6.data,) = _get_struct_Q().unpack(str[start:end])
        self.linear_acceleration.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.angular_velocity = []
      for i in range(0, length):
        val1 = mqtt_ros_bridge.msg.Vector3Time()
        _v7 = val1.vector
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.time
        start = end
        end += 8
        (_v8.data,) = _get_struct_Q().unpack(str[start:end])
        self.angular_velocity.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.time.data
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.linear_acceleration)
      buff.write(_struct_I.pack(length))
      for val1 in self.linear_acceleration:
        _v9 = val1.vector
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = val1.time
        _x = _v10.data
        buff.write(_get_struct_Q().pack(_x))
      length = len(self.angular_velocity)
      buff.write(_struct_I.pack(length))
      for val1 in self.angular_velocity:
        _v11 = val1.vector
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.time
        _x = _v12.data
        buff.write(_get_struct_Q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.time is None:
        self.time = std_msgs.msg.UInt64()
      if self.linear_acceleration is None:
        self.linear_acceleration = None
      if self.angular_velocity is None:
        self.angular_velocity = None
      end = 0
      start = end
      end += 8
      (self.time.data,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.linear_acceleration = []
      for i in range(0, length):
        val1 = mqtt_ros_bridge.msg.Vector3Time()
        _v13 = val1.vector
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.time
        start = end
        end += 8
        (_v14.data,) = _get_struct_Q().unpack(str[start:end])
        self.linear_acceleration.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.angular_velocity = []
      for i in range(0, length):
        val1 = mqtt_ros_bridge.msg.Vector3Time()
        _v15 = val1.vector
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = val1.time
        start = end
        end += 8
        (_v16.data,) = _get_struct_Q().unpack(str[start:end])
        self.angular_velocity.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
